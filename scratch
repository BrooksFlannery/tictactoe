export type player = "x" | "o";
export type cell = player | null;
export type row = cell[]
export type board = row[]
export type endstate = player | "tie" | null;
export type gameState = {
    board: board,
    playerTurn: player,
    endstate?: endstate
}
export type moveCoords = {
    rowIndex : number,
    colIndex: number
}
export function InitGameState(): gameState{
    return {
        board: [[null, null, null],[null, null, null],[null, null, null]],
        playerTurn: "x",
    }
}

export function move(prevState:gameState, moveCoords: moveCoords) : gameState{
    const newState = structuredClone(prevState);
    if(newState.board[moveCoords.rowIndex][moveCoords.colIndex]) return newState;
    newState.board[moveCoords.rowIndex][moveCoords.colIndex] = newState.playerTurn;
    newState.playerTurn = switchPlayer(newState.playerTurn)

    checkEndState(newState);

    return newState;
}

function checkEndState(newState:gameState){
    //loop through rows check for win

    for (let index = 0; index < newState.board[0].length; index++) {
        if(newState.board[0][index] === null) return;
        
    }

    //loop through coloumns check for wins
    //check each diagonal for wins
    //if we get to the end with no winners and no 
}

export function switchPlayer(curPlayer:player):player{
    return curPlayer === "x" ? "o" : "x";  
}